import pprint
import json
import os

pf = pprint.PrettyPrinter(width=41, compact=True).pformat

SITE_DIR = "".join((
    f"{os.environ.get('HOME')}",
    "/working/eiq/eiq-antora-monorepo/build/site"
    ))
STORK_INDEX_FILENAME = "eiq-antora.st"
DATA = "_data/site-manifest.json"


class StorkFileItem:
    def __init__(
            self,
            path: str,
            url: str,
            title: str,
            ):
        self.path = "".join((SITE_DIR, url))
        self.url = url
        self.title = title

    def to_dict(self) -> dict:
        return {
            "path": self.path,
            "url": self.url,
            "title": self.title,
        }

    # can't even use the toml package here
    # because it dumps out the dict
    # as newline separated and not comma separated
    def to_toml(self) -> str:
        return "".join((
            f"{{path = \"{self.path}\", ",
            f"url = \"{self.url}\", ",
            f"title = \"{self.title}\"}}"))


StorkFileList = list[dict]  # type alias


class StorkConfigRaw:
    def __init__(
            self,
            base_directory: str,
            url_prefix: str,
            files: StorkFileList,
            output_filename: str,
            debug=False,  # type: bool
            ):
        self.base_directory = base_directory  # type: str
        self.url_prefix = url_prefix  # type: str
        self.files = files  # type: StorkFileList

        self.output_filename = output_filename  # type: str

        # we can't even use the toml package to coerc bool types
        # from python to toml because it just doesn't handle it.
        # i.e. python bool ``False``` must be converted to ``false``
        # for toml â€¦ but toml.dumps just doesn't do it.
        self.debug = "true" if debug else "false"  # type: str


class StorkToml:
    def new(c: StorkConfigRaw) -> str:
        assert(
            c.base_directory and
            c.url_prefix and
            c.files and
            c.output_filename and
            c.debug
        )

        # cannot simply pass c.files through toml.dumps()
        # to produce a toml list as per
        # https://github.com/toml-lang/toml/blob/1.0.0-rc.3/toml.md#user-content-array
        # because the standard that the toml package
        # implements apparently uses an older standard
        # (see https://github.com/uiri/toml/issues/320)

        return f"""# Generated from {__name__}

[input]
base_directory = \"{c.base_directory}\"
url_prefix = \"{c.url_prefix}\"
files = {c.files}

[output]
filename = \"{c.output_filename}\"
debug = {c.debug}
"""


def parse_sitmanifest(data: dict) -> StorkConfigRaw:
    """
    Specifically for parsing site-manifest.json files
    generated by https://gitlab.com/opendevise/oss/antora-site-generator-ms

    We expect the data loaded with
    ``json.load("site-manifest.json")``
    to be structured like this:

        ..  code-block:: javascript

            {
                \"version\": 3,
                \"generated\": 1611367477126,
                \"url\": \"http://localhost\",
                \"components\": [
                    {
                    \"name\": \"TD2020-demo\",
                    \"title\": \"TD2020 demo\",
                    \"latest\": \"0.1.0\",
                    \"versions\": [
                        {
                        \"version\": \"0.1.0\",
                        \"url\": \"/TD2020-demo/0.1.0/index.html\",
                        \"pages\": [
                            {
                            \"module\": \"about-eiq-platform\",
                            \"path\": \"about-platform-ui.adoc\",
                            \"url\":\
\"/TD2020-demo/0.1.0/about-eiq-platform/about-platform-ui.html\",
                        \"title\":\
\"About the platform&#8217;s user interface\"
                            },
                            //...
                            ]
                        }]
                    }
                ]
            }

    :param data: dict from ``json.load("site-manifest.json")``.
    :returns: StorkConfigRaw
    """

    # we must construct file_list as a string
    # unelegantly, because the toml==0.10.2
    # package does not allow dicts in toml lists.
    # see earlier note in line 62
    file_list = "["
    for component in data.get("components"):
        for version in component.get("versions"):
            for page in version.get("pages"):
                thisfile = StorkFileItem(
                    page.get('path'),
                    page.get('url'),
                    page.get('title')
                    ).to_toml()
                file_list = file_list + f"{thisfile}, "
    file_list.rstrip(", ")
    file_list = file_list + "]"

    return StorkConfigRaw(
        base_directory=SITE_DIR,
        url_prefix=data.get("url")+":5000",
        files=file_list,
        output_filename=STORK_INDEX_FILENAME
    )


if __name__ == "__main__":
    stork = StorkConfigRaw(
        "basedir",
        "urlpref",
        "files",
        "outfile",
        # True
        )

    with open(DATA, "r") as f:
        data = json.load(f)
        f.close()

    parsed_manifest = parse_sitmanifest(data)
    output_toml = StorkToml.new(parsed_manifest)

    with open("../eiq-antora-monorepo/site-manifest.toml", "w") as file:
        file.write(f"{output_toml}")
        file.close()
